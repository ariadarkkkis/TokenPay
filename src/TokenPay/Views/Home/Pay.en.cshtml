@{
    ViewData["Title"] = "Pay";
    var Now = DateTime.Now.ToUniversalTime();
    var ExpireTime = ViewData.ContainsKey("ExpireTime") ? Convert.ToDateTime(ViewData["ExpireTime"]).ToUniversalTime() : Now;
}
@using TokenPay.Domains;
@using TokenPay.Extensions
@using TokenPay.Models.EthModel;
@model TokenPay.Domains.TokenOrders
@inject List<EVMChain> chain

<style>
    body {
        background: #000000;
        background-image: url(../bg.jpg);
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-attachment: fixed;
        min-height: 100vh;
        color: #e4e6eb;
    }
    
    .payment-container {
        background: rgba(255, 255, 255, 0.07);
        border-radius: 16px;
        padding: 2.5rem;
        box-shadow: 
            0 8px 32px rgba(0, 0, 0, 0.4),
            inset 0 0 32px rgba(255, 255, 255, 0.05);
        backdrop-filter: blur(40px) saturate(180%);
        -webkit-backdrop-filter: blur(40px) saturate(180%);
        border: none;
        max-width: 500px;
        margin: 0 auto;
        position: relative;
        overflow: hidden;
    }

    .payment-container::after {
        content: '';
        position: absolute;
        inset: 0;
        border-radius: 16px;
        padding: 1px;
        background: linear-gradient(
            180deg,
            rgba(255, 255, 255, 0.08),
            rgba(255, 255, 255, 0.02)
        );
        -webkit-mask: 
            linear-gradient(#fff 0 0) content-box, 
            linear-gradient(#fff 0 0);
        mask: 
            linear-gradient(#fff 0 0) content-box, 
            linear-gradient(#fff 0 0);
        -webkit-mask-composite: xor;
        mask-composite: exclude;
        pointer-events: none;
    }
    
    .time {
        font-family: 'JetBrains Mono', Consolas, Menlo, Courier;
        color: #e4e6eb;
    }

    .address-container {
        background: linear-gradient(145deg, #141922, #1a202b);
        border-radius: 16px;
        padding: 1.5rem;
        margin: 1.5rem 0;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.05);
    }

    .address-scroll {
        padding: 1rem;
        font-family: 'JetBrains Mono', Consolas, Menlo, Courier;
        color: #3b82f6;
        background: #1e242e;
        border-radius: 12px;
        border: 1px solid rgba(59, 130, 246, 0.2);
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 1rem;
    }

    .address-value {
        font-size: 1.1rem;
        word-break: break-all;
        line-height: 1.5;
        flex: 1;
        font-weight: 600;
        color: #ffffff;
    }

    .copy-btn {
        flex-shrink: 0;
    }

    .amount-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        background: #1e242e;
        border-radius: 12px;
        border: 1px solid rgba(59, 130, 246, 0.2);
        margin-top: 1rem;
    }

    .amount-display {
        color: #ffffff;
        font-family: 'JetBrains Mono', Consolas, Menlo, Courier;
        font-weight: 600;
        font-size: 1.1rem;
    }
    
    .custom-input {
        background-color: #1e242e !important;
        border: 1px solid rgba(59, 130, 246, 0.2) !important;
        color: #e4e6eb !important;
        border-radius: 8px !important;
    }
    
    .custom-input:focus {
        box-shadow: 0 0 0 0.25rem rgba(59, 130, 246, 0.25) !important;
    }
    
    .custom-btn {
        background-color: #3b82f6;
        border-color: #3b82f6;
        color: white;
        border-radius: 8px;
        transition: all 0.2s ease;
    }
    
    .custom-btn:hover {
        background-color: #2563eb;
        border-color: #2563eb;
        transform: translateY(-1px);
    }
    
    .qr-container {
        background-color: white;
        padding: 1.5rem;
        border-radius: 12px;
        display: block;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        max-width: 100%;
        width: 100%;
    }
    
    .qr-container img {
        width: 100%;
        height: auto;
        display: block;
        margin: 0 auto;
        max-width: 380px;
        aspect-ratio: 1/1;
        object-fit: contain;
    }
    
    .warning-text {
        color: #5a95f4;
    }

    .warning-container {
        background: linear-gradient(145deg, #1e242e, #23292f);
        border-radius: 12px;
        padding: 1.2rem;
        margin: 1.5rem 0;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }

    .address-details {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        margin-top: 1rem;
        background: #1e242e;
        border-radius: 12px;
        border: 1px solid rgba(59, 130, 246, 0.2);
    }

    .timer-container {
        display: flex;
        justify-content: center;
        gap: 0.75rem;
        margin: 1.5rem 0;
        font-family: 'JetBrains Mono', Consolas, Menlo, Courier;
    }

    .timer-block {
        background: linear-gradient(145deg, #1e242e, #23292f);
        padding: 1rem;
        border-radius: 12px;
        min-width: 70px;
        text-align: center;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }

    .timer-number {
        font-size: 1.75rem;
        font-weight: bold;
        color: #ffffff;
        margin-bottom: 0.2rem;
    }

    .timer-label {
        font-size: 0.7rem;
        color: #94a3b8;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .info-grid {
        display: grid;
        gap: 1rem;
        background: linear-gradient(145deg, #1e242e, #23292f);
        padding: 1.5rem;
        border-radius: 12px;
        margin-top: 1.5rem;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    }

    .info-item {
        display: grid;
        gap: 0.5rem;
    }

    @@media (min-width: 768px) {
        .info-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
    }

    .info-item .info-label {
        color: #94a3b8;
    }

    .info-item .info-value {
        color: #ffffff;
        font-weight: 600;
        word-break: break-all;
    }

    .info-label {
        color: #94a3b8;
        font-size: 0.875rem;
        text-align: left;
        font-weight: 600;
        letter-spacing: 0.01em;
        text-transform: uppercase;
    }

    .blockchain-warning {
        background: linear-gradient(145deg, #141922, #1a202b);
        border-radius: 16px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.05);
    }

    .blockchain-info {
        margin-bottom: 1rem;
    }

    .blockchain-info:last-child {
        margin-bottom: 0;
    }

    .blockchain-label {
        color: #94a3b8;
        font-size: 0.875rem;
        margin-bottom: 0.5rem;
        text-align: left;
        font-weight: 600;
        letter-spacing: 0.01em;
        text-transform: uppercase;
    }

    .blockchain-value {
        padding: 1rem;
        background: #1e242e;
        border-radius: 12px;
        border: 1px solid rgba(59, 130, 246, 0.2);
        color: #ffffff;
        font-weight: 600;
        font-size: 1.1rem;
    }

    .address-section, .amount-section {
        margin-bottom: 1rem;
    }

    .address-section:last-child, .amount-section:last-child {
        margin-bottom: 0;
    }

    @@media (max-width: 400px) {
        .blockchain-warning {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 1rem;
            gap: 0.75rem;
        }
        
        .blockchain-info {
            align-items: center;
            font-size: 0.85rem;
            justify-content: center;
            width: 100%;
        }
        
        .timer-container {
            padding: 1rem;
        }
        
        .timer-block {
            min-width: 60px;
            padding: 0.75rem;
        }

        .timer-label {
            font-size: 0.6rem;
        }
        
        .timer-number {
            font-size: 1.5rem;
        }
    }
</style>

@if (Model == null)
{
    <div class="row align-items-center h-100">
        <div class="text-center">
            <h1 class="display-4">Order does not exist!</h1>
        </div>
    </div>
}
else
{
    <div class="container py-5">
        <div class="payment-container">
            <div class="text-center">
                <div class="warning-container">
                    <div class="warning-text fw-bold">⚠️ Please pay in time to avoid losing assets or payment failures!</div>
                </div>
                <!--h4 class="display-6 mb-4">You are paying <span class="warning-text">@Model.Currency.ToCurrency(chain, true)</span> on <span class="warning-text">@Model.Currency.ToBlockchainEnglishName(chain)</span> blockchain</h4-->
                <h4 class="display-6 mb-4" style="color: #94a3b8;">Remaining Time</h4>

                <div class="timer-container invisible time">
                    <div class="timer-block">
                        <div class="timer-number" id="hour_show">00</div>
                        <div class="timer-label">Hours</div>
                    </div>
                    <div class="timer-block">
                        <div class="timer-number" id="minute_show">00</div>
                        <div class="timer-label">Minutes</div>
                    </div>
                    <div class="timer-block">
                        <div class="timer-number" id="second_show">00</div>
                        <div class="timer-label">Seconds</div>
                    </div>
                </div>

                <div class="mb-4">
                    <div class="qr-container">
                        <img src="data:image/png;base64,@ViewData["QrCode"]" alt="address">
                    </div>
                </div>

                <div class="blockchain-warning">
                    <div class="warning-container">
                        <div class="warning-text fw-bold">⚠️ Please double check the blockchain and coin to avoid losing assets or payment failures!</div>
                    </div>
                    <div class="blockchain-info">
                        <div class="blockchain-label">Blockchain</div>
                        <div class="blockchain-value">@Model.Currency.ToBlockchainEnglishName(chain) (@Model.Currency.ToNetworkName(chain))</div>
                    </div>
                    <div class="blockchain-info">
                        <div class="blockchain-label">Coin</div>
                        <div class="blockchain-value">@Model.Currency.ToCurrency(chain)</div>
                    </div>
                </div>

                <div class="address-container">
                    <div class="warning-container" style="margin: 0; margin-bottom: 1.5rem;">
                        <div class="warning-text fw-bold">⚠️ Please send the exact amount to the address below, otherwise the payment will fail!</div>
                    </div>
                    <div class="address-section">
                        <div class="info-label">Address</div>
                        <div class="address-scroll">
                            <div class="address-value" id="Token">@Model.ToAddress</div>
                            <button class="btn custom-btn btn-sm copy-btn" data-clipboard-target="#Token">Copy</button>
                        </div>
                    </div>
                    <div class="amount-section">
                        <div class="info-label">Amount</div>
                        <div class="amount-container">
                            <div class="amount-display">
                                @Model.Amount @Model.Currency.ToCurrency(chain)
                            </div>
                            <button class="btn custom-btn btn-sm" data-clipboard-text="@Model.Amount">Copy</button>
                        </div>
                    </div>
                </div>

                <div class="info-grid">
                    <div class="info-item">
                        <span class="info-label">Order No</span>
                        <span class="info-value">@Model.OutOrderId</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Expiration</span>
                        <span class="info-value" id="expiration-time" data-utc="@ExpireTime.ToString("yyyy-MM-dd'T'HH:mm:ss'Z'")"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @section Scripts {
        <script>
            let Time;
            var EndTime = new Date('@ExpireTime.ToUniversalTime().ToString("yyyy/MM/dd HH:mm:ss")');
            
            function formatDateTime(date) {
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const day = String(date.getDate()).padStart(2, '0');
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');
                const seconds = String(date.getSeconds()).padStart(2, '0');
                
                return `${year}/${month}/${day} ${hours}:${minutes}:${seconds}`;
            }

            // Format expiration time
            const expirationElement = document.getElementById('expiration-time');
            const utcDate = new Date(expirationElement.dataset.utc);
            expirationElement.textContent = formatDateTime(utcDate);

            function timer() {
                window.setInterval(function () {
                    var intDiff = (EndTime - new Date(new Date().toISOString().replace('T', ' ').replace('Z', ''))) / 1000
                    if (intDiff <= 0) return;
                    $(".time").removeClass("invisible")
                    var day = 0,
                        hour = 0,
                        minute = 0,
                        second = 0;
                    if (intDiff > 0) {
                        day = Math.floor(intDiff / (60 * 60 * 24));
                        hour = Math.floor(intDiff / (60 * 60)) + (day * 24);
                        minute = Math.floor(intDiff / 60) - (hour * 60);
                        second = Math.floor(intDiff) - (hour * 60 * 60) - (minute * 60);
                    }
                    if (hour <= 9) hour = '0' + hour;
                    if (minute <= 9) minute = '0' + minute;
                    if (second <= 9) second = '0' + second;
                    $('#hour_show').html(hour);
                    $('#minute_show').html(minute);
                    $('#second_show').html(second);
                    intDiff--;
                }, 1000);
            }
            $(() => {
                timer();
                Time = setInterval(Check, 1000);
            })
            function Check() {
                var RedirectUrl = "@(Model?.RedirectUrl)";
                $.get("/Check/@(Model?.Id)")
                    .then(x => {
                        if (x === 'Pending') {
                            console.log('Pending')
                        } else if (x === 'Expired') {
                            clearInterval(Time)
                            console.log('Expired')
                            location.reload();
                        } else if (x === 'Paid') {
                            clearInterval(Time)
                            console.log('Paid')
                            setTimeout(() => {
                                if (RedirectUrl) {
                                    location = RedirectUrl
                                } else {
                                    alert("Paid")
                                }
                            }, 0)
                        }
                    })
            }
        </script>
    }
}
